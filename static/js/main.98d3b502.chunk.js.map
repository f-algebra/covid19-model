{"version":3,"sources":["utils.ts","components/InfectivityPlot.tsx","components/HistoricalDataPlot.tsx","model/InfectivityModel.ts","services/HistoricalDataService.ts","components/OutbreakPredictionPlot.tsx","model/PredictionModel.ts","model/HistoricalDataModel.ts","components/App.tsx","index.js"],"names":["first","x","Array","InfectivityPlot","props","state","infectivityUpdate","Subscriber","create","update","setState","start","stop","model","subscription","updates","subscribe","getParams","this","unsubscribe","xs","num","step","range","map","linspace","ys","days","run","Grid","container","data","y","type","mode","marker","color","layout","autosize","yaxis","title","text","xaxis","item","noninfectiousUntil","Slider","value","min","max","onChange","e","setNoninfectiousUntil","rampUpAfter","setRampUpAfter","rampDownAfter","setRampDownAfter","totalDays","setTotalDays","basicReproduction","v","setBasicReproduction","React","PureComponent","HistoricalDataPlot","dataModel","getData","dataUpdate","regionItems","regions","forEach","name","push","MenuItem","key","provinceItems","provinces","length","label","dateRange","dailyCumulativeCases","Select","fullWidth","setRegion","target","disabled","setProvince","InfectivityModel","params","Subject","Object","assign","next","updateParams","daysPostExposure","daysUntilInfectious","daysUntilPeak","daysUntilDrop","daysTotal","peak","FIRST_DATE","Dates","HistoricalDataService","historicalData","Map","fetch","csv","then","updateRawData","rows","loadDateRange","rawDataDateRange","d","row","regionName","provinceName","provinceData","lastEntry","i","today","parseInt","region","get","set","calculateCaseSum","date","result","record","values","from","sum","j","OutbreakPredictionPlot","predictionUpdate","paramsUpdate","subscriptions","predictionUpdates","paramUpdates","getLatestPrediction","sub","dateText","predictionDates","predictionCases","historicalDates","historicalCases","infectiousCases","dailyInfectiousCases","hospitalizedCases","dailyHospitalizedCases","predictFromDate","getPredictFromDate","round","detectionRatio","setDetectionRatio","hospitalizationRatio","setHospitalizationRatio","socialDistancingEffect","setSocialDistancingEffect","getChoiceText","TextField","population","setPopulation","style","height","predictFromDay","setPredictFromDay","predictForDays","setPredictForDays","marginTop","marginBottom","Button","onClick","updatePrediction","peakHospitalizedCases","width","legend","orientation","yanchor","OutbreakModel","infectivity","latestPrediction","stepSizeDays","predict","day","predictToDate","startDate","untilDate","until","console","assert","dates","Utils","stepsPerDay","ceil","steps","stepsUntilRecovery","newlyInfected","newlyRecovered","totalInfected","totalRecovered","floor","infectionRate","susceptible","dailyRecoveredCases","HistoricalDataModel","dataService","dataSeries","province","dateServiceUpdate","calculate","cases","getHistoricalData","keys","App","infectivityModel","historicalDataModel","outbreakModel","Container","maxWidth","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98d3b502.chunk.js","sourcesContent":["import {range} from 'lodash';\r\nimport * as dates from 'date-fns'\r\n\r\nexport function linspace(start: number, stop: number, num: number = 50) {\r\n    const step = (stop - start) / (num - 1);\r\n    return range(num).map(x => start + (x * step));\r\n}\r\n\r\nexport function dateRange(startDate: Date, untilDate: Date): Date[] {\r\n    let start = startDate;\r\n    const until = untilDate;\r\n    console.assert(dates.isAfter(until, start));\r\n    const result: Date[] = [];\r\n    while (dates.isBefore(start, until)) {\r\n        result.push(start);\r\n        start = dates.addDays(start, 1);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function first<T>(x: T | T[]): T {\r\n    if (x instanceof Array) {\r\n        return x[0];\r\n    } else {\r\n        return x;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Grid, Slider, TextField } from '@material-ui/core'\r\nimport Plot from 'react-plotly.js'\r\nimport { linspace, first } from '../utils'\r\nimport {\r\n  InfectivityModel,\r\n  InfectivityModelParams,\r\n  InfectivityModelUpdate\r\n} from '../model/InfectivityModel'\r\nimport { Subscriber, Unsubscribable } from 'rxjs'\r\n\r\ninterface InfectivityPlotProps {\r\n  start: number\r\n  stop: number\r\n  model: InfectivityModel\r\n}\r\n\r\nexport default class InfectivityPlot extends React.PureComponent<\r\n  InfectivityPlotProps\r\n> {\r\n  state: { subscription: Unsubscribable } & InfectivityPlotProps &\r\n    InfectivityModelParams\r\n\r\n  constructor(props: InfectivityPlotProps) {\r\n    super(props)\r\n    const infectivityUpdate = Subscriber.create<InfectivityModelUpdate>(\r\n      update => this.setState(update || {})\r\n    )\r\n    this.state = {\r\n      start: props.start,\r\n      stop: props.stop,\r\n      model: props.model,\r\n      subscription: props.model.updates.subscribe(infectivityUpdate),\r\n      ...props.model.getParams()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.subscription.unsubscribe()\r\n  }\r\n\r\n  render() {\r\n    const xs = linspace(this.state.start, this.state.stop)\r\n    const ys = xs.map(days => this.state.model.run(days, this.state))\r\n    return (\r\n      <div>\r\n        <h2>Step 2. Customize your infectiousness function</h2>\r\n        <Grid container>\r\n          Possibly skip this step if you haven't read much epidemiology research\r\n          on COVID-19. I certainly haven't.\r\n        </Grid>\r\n        <Grid container>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: xs,\r\n                y: ys,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                marker: { color: 'red' }\r\n              }\r\n            ]}\r\n            layout={{\r\n              autosize: true,\r\n              yaxis: { title: { text: 'Infectiousness' } },\r\n              xaxis: { title: { text: 'Days after initial infection' } }\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Non-infectious until {this.state.noninfectiousUntil} days after\r\n            infection\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={0.1}\r\n              value={this.state.noninfectiousUntil}\r\n              min={this.state.start}\r\n              max={this.state.stop}\r\n              onChange={(e, x) =>\r\n                this.state.model.setNoninfectiousUntil(first(x))\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Fully infectious {this.state.rampUpAfter} days after infection\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={0.1}\r\n              value={this.state.rampUpAfter}\r\n              min={this.state.start}\r\n              max={this.state.stop}\r\n              onChange={(e, x) => this.state.model.setRampUpAfter(first(x))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Infectiousness decreases after {this.state.rampDownAfter} days\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={0.1}\r\n              value={this.state.rampDownAfter}\r\n              min={this.state.start}\r\n              max={this.state.stop}\r\n              onChange={(e, x) => this.state.model.setRampDownAfter(first(x))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Recovered {this.state.totalDays} days after infection\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={0.1}\r\n              value={this.state.totalDays}\r\n              min={this.state.start}\r\n              max={this.state.stop}\r\n              onChange={(e, x) => this.state.model.setTotalDays(first(x))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Basic Reproduction Number R<sub>0</sub> is{' '}\r\n            {this.state.basicReproduction}\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={0.1}\r\n              value={this.state.basicReproduction}\r\n              min={0.0}\r\n              max={10.0}\r\n              onChange={(e, v) =>\r\n                this.state.model.setBasicReproduction(first(v))\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Container, Grid, MenuItem, Select, Slider } from '@material-ui/core'\r\nimport Plot from 'react-plotly.js'\r\nimport { Subscriber, Subscription } from 'rxjs'\r\nimport { DataSeries, HistoricalDataModel } from '../model/HistoricalDataModel'\r\n\r\ninterface HistoricalDataPlotProps {\r\n  dataModel: HistoricalDataModel\r\n}\r\n\r\nexport default class HistoricalDataPlot extends React.PureComponent<\r\n  HistoricalDataPlotProps\r\n> {\r\n  state: DataSeries\r\n  private subscription: Subscription\r\n  private dataModel: HistoricalDataModel\r\n\r\n  constructor(props: HistoricalDataPlotProps) {\r\n    super(props)\r\n    this.dataModel = props.dataModel\r\n    this.state = this.dataModel.getData()\r\n    const dataUpdate = Subscriber.create<DataSeries>(update =>\r\n      this.setState(update || {})\r\n    )\r\n    this.subscription = props.dataModel.updates.subscribe(dataUpdate)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.subscription.unsubscribe()\r\n  }\r\n\r\n  render() {\r\n    const regionItems = new Array<JSX.Element>()\r\n    this.state.regions.forEach(name => {\r\n      regionItems.push(\r\n        <MenuItem value={name} key={name}>\r\n          {name}\r\n        </MenuItem>\r\n      )\r\n    })\r\n    regionItems.push(\r\n      <MenuItem value={''} key={''}>\r\n        All Countries/Regions\r\n      </MenuItem>\r\n    )\r\n\r\n    const provinceItems = new Array<JSX.Element>()\r\n    if (this.state.provinces.length > 1) {\r\n      this.state.provinces.forEach(name => {\r\n        let label = name\r\n        if (!label) {\r\n          label = 'Other'\r\n        }\r\n        provinceItems.push(\r\n          <MenuItem value={name} key={label}>\r\n            {label}\r\n          </MenuItem>\r\n        )\r\n      })\r\n      provinceItems.push(\r\n        <MenuItem value={''} key={''}>All Provinces/States</MenuItem>\r\n      )\r\n    }\r\n\r\n    const xs = this.state.dateRange\r\n    const ys = this.state.dailyCumulativeCases\r\n    return (\r\n      <div>\r\n        <h2>Step 1. Choose live data to build predictions from</h2>\r\n        <Grid container>\r\n          Pick a country/region and a province/state to predict the spread in that area.\r\n        </Grid>\r\n        <Grid container>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: xs,\r\n                y: ys,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                marker: { color: 'red' }\r\n              }\r\n            ]}\r\n            layout={{\r\n              autosize: true,\r\n              yaxis: { title: { text: `Reported Cases (Cumulative)` } },\r\n              xaxis: { title: { text: 'Date' } }\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={3}>\r\n            Choose a Country/Region\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Select\r\n              fullWidth={true}\r\n              onChange={e => {\r\n                this.dataModel.setRegion(e.target.value as string)\r\n              }}\r\n            >\r\n              {regionItems}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            Choose a Province/State\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Select\r\n              fullWidth={true}\r\n              disabled={provinceItems.length === 0}\r\n              onChange={e => {\r\n                this.dataModel.setProvince(e.target.value as string)\r\n              }}\r\n            >\r\n              {provinceItems}\r\n            </Select>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { max, min } from 'lodash'\r\nimport { Subject } from 'rxjs'\r\n\r\nexport interface InfectivityModelUpdate {\r\n  noninfectiousUntil?: number\r\n  rampUpAfter?: number\r\n  rampDownAfter?: number\r\n  totalDays?: number\r\n  basicReproduction?: number\r\n}\r\n\r\nexport interface InfectivityModelParams {\r\n  noninfectiousUntil: number\r\n  rampUpAfter: number\r\n  rampDownAfter: number\r\n  totalDays: number\r\n  basicReproduction: number\r\n}\r\n\r\nexport class InfectivityModel {\r\n  private params: InfectivityModelParams = {\r\n    noninfectiousUntil: 5.2,\r\n    rampUpAfter: 10.5,\r\n    rampDownAfter: 15.7,\r\n    totalDays: 20.9,\r\n    basicReproduction: 2.4\r\n  }\r\n\r\n  readonly updates: Subject<InfectivityModelUpdate> = new Subject()\r\n\r\n  getParams(): InfectivityModelParams {\r\n    return this.params\r\n  }\r\n\r\n  private updateParams(update: InfectivityModelUpdate = this.params): void {\r\n    this.params = Object.assign(this.params, update)\r\n    this.updates.next(update)\r\n  }\r\n\r\n  setBasicReproduction(basicReproduction: number) {\r\n    this.updateParams({basicReproduction})\r\n  }\r\n\r\n  setNoninfectiousUntil(days: number): void {\r\n    this.updateParams({\r\n      noninfectiousUntil: min([days, this.params.rampUpAfter]) || days\r\n    })\r\n  }\r\n\r\n  setRampUpAfter(days: number): void {\r\n    this.updateParams({\r\n      rampUpAfter:\r\n        max([\r\n          this.params.noninfectiousUntil,\r\n          min([days, this.params.rampDownAfter])\r\n        ]) || days\r\n    })\r\n  }\r\n\r\n  setRampDownAfter(days: number): void {\r\n    this.updateParams({\r\n      rampDownAfter:\r\n        max([this.params.rampUpAfter, min([days, this.params.totalDays])]) ||\r\n        days\r\n    })\r\n  }\r\n\r\n  setTotalDays(days: number): void {\r\n    this.updateParams({\r\n      totalDays: max([days, this.params.rampDownAfter]) || days\r\n    })\r\n  }\r\n\r\n  run(daysPostExposure: number, params: InfectivityModelParams = this.params): number {\r\n    const daysUntilInfectious = params.noninfectiousUntil\r\n    const daysUntilPeak = params.rampUpAfter\r\n    const daysUntilDrop = params.rampDownAfter\r\n    const daysTotal = params.totalDays\r\n    const peak =\r\n      params.basicReproduction /\r\n      ((daysTotal + daysUntilDrop - (daysUntilPeak + daysUntilInfectious)) /\r\n        2.0)\r\n    if (\r\n      daysPostExposure < daysUntilInfectious ||\r\n      daysPostExposure > daysTotal\r\n    ) {\r\n      return 0.0\r\n    } else if (daysPostExposure < daysUntilPeak) {\r\n      return (\r\n        peak *\r\n        ((daysPostExposure - daysUntilInfectious) /\r\n          (daysUntilPeak - daysUntilInfectious))\r\n      )\r\n    } else if (daysPostExposure < daysUntilDrop) {\r\n      return peak\r\n    } else {\r\n      return (\r\n        peak * ((daysTotal - daysPostExposure) / (daysTotal - daysUntilDrop))\r\n      )\r\n    }\r\n  }\r\n}\r\n","\r\nimport { csv } from 'd3-fetch'\r\nimport { DSVRowArray, DSVRowString } from 'd3-dsv'\r\nimport * as Dates from 'date-fns'\r\nimport { Subject } from 'rxjs'\r\n\r\nconst DATA_URL =\r\n  'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'\r\nconst PROVINCE_COL = 'Province/State'\r\nconst REGION_COL = 'Country/Region'\r\nconst DATE_FORMAT = 'M/d/yy'\r\nconst FIRST_DATE: Date = Dates.parseISO('2020-01-22')\r\n\r\nexport interface ProvinceData {\r\n  dailyCumulativeCases: number[]\r\n}\r\n\r\nexport interface RegionData {\r\n  provinces: Map<string, ProvinceData>\r\n  dailyCumulativeCases: number[]\r\n}\r\n\r\nexport interface HistoricalData {\r\n  regions: Map<string, RegionData>\r\n  dateRange: Date[]\r\n  dailyCumulativeCases: number[]\r\n}\r\n\r\nexport class HistoricalDataService {\r\n  private historicalData: HistoricalData = {\r\n    regions: new Map(),\r\n    dateRange: [],\r\n    dailyCumulativeCases: []\r\n  }\r\n\r\n  getHistoricalData(): HistoricalData {\r\n    return this.historicalData\r\n}\r\n\r\n  constructor() {\r\n    this.fetch()\r\n  }\r\n\r\n  readonly updates = new Subject<HistoricalData>()\r\n\r\n  static loadDateRange(row: DSVRowString<string>): Date[] {\r\n    let date = FIRST_DATE\r\n    const result = []\r\n    while (Dates.format(date, DATE_FORMAT) in row) {\r\n      result.push(date)\r\n      date = Dates.add(date, { days: 1 })\r\n    }\r\n    return result\r\n  }\r\n\r\n  fetch(): void {\r\n    csv(DATA_URL).then(data => this.updateRawData(data))\r\n  }\r\n\r\n  private static calculateCaseSum(record: RegionData | HistoricalData): void {\r\n    let values: {dailyCumulativeCases: number[]}[]\r\n    if ('provinces' in record) {\r\n      values = Array.from(record.provinces.values())\r\n    } else {\r\n      values = Array.from(record.regions.values())\r\n    }\r\n    record.dailyCumulativeCases = []\r\n    for (let i = 0; i < values[0].dailyCumulativeCases.length; i++) {\r\n      let sum = 0.0\r\n      for (let j = 0; j < values.length; j++) {\r\n        sum += values[j].dailyCumulativeCases[i]\r\n      }\r\n      record.dailyCumulativeCases.push(sum)\r\n    }\r\n  }\r\n\r\n  private updateRawData(rows: DSVRowArray<string>): void {\r\n    if (rows.length === 0) {\r\n      return\r\n    }\r\n\r\n    const regions = new Map<string, RegionData>()\r\n    const dateRange = HistoricalDataService.loadDateRange(rows[0])\r\n    const rawDataDateRange = dateRange.map(d => Dates.format(d, DATE_FORMAT))\r\n\r\n    rows.forEach(row => {\r\n      const regionName = row[REGION_COL]\r\n      const provinceName = row[PROVINCE_COL] || ''\r\n      if (!regionName) {\r\n        return\r\n      }\r\n\r\n      const provinceData: ProvinceData = {\r\n        dailyCumulativeCases: new Array<number>()\r\n      }\r\n\r\n      let lastEntry = '0.0'\r\n        for (let i = 0; i < rawDataDateRange.length; i++) {\r\n        const today = row[rawDataDateRange[i]] || lastEntry\r\n        lastEntry = today\r\n        provinceData.dailyCumulativeCases.push(parseInt(today))\r\n      }\r\n\r\n      const region = regions.get(regionName) || {\r\n        provinces: new Map(),\r\n        dailyCumulativeCases: []\r\n      }\r\n      regions.set(regionName, region)\r\n      region.provinces.set(provinceName, provinceData)\r\n    })\r\n\r\n    regions.forEach(region => {\r\n      HistoricalDataService.calculateCaseSum(region)\r\n    })\r\n    this.historicalData = { regions, dateRange, dailyCumulativeCases: [] }\r\n    HistoricalDataService.calculateCaseSum(this.historicalData)\r\n\r\n    this.updates.next(this.historicalData)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Button, Container, Grid, Slider, TextField } from '@material-ui/core'\r\nimport Plot from 'react-plotly.js'\r\nimport { Subscriber, Unsubscribable } from 'rxjs'\r\nimport {\r\n  OutbreakModel,\r\n  OutbreakModelUpdate,\r\n  Prediction\r\n} from '../model/PredictionModel'\r\nimport { first } from '../utils'\r\nimport * as Dates from 'date-fns'\r\nimport { round } from 'lodash'\r\n\r\ninterface OutbreakPredictionPlotProps {\r\n  model: OutbreakModel\r\n}\r\n\r\nexport default class OutbreakPredictionPlot extends React.PureComponent<\r\n  OutbreakPredictionPlotProps\r\n> {\r\n  state: { subscriptions: Unsubscribable[] } & Prediction\r\n  private readonly model: OutbreakModel\r\n\r\n  constructor(props: OutbreakPredictionPlotProps) {\r\n    super(props)\r\n    const predictionUpdate = Subscriber.create<Prediction>(update =>\r\n      this.setState(update || {})\r\n    )\r\n    const paramsUpdate = Subscriber.create<OutbreakModelUpdate>(update => {\r\n      this.setState(update || {})\r\n    })\r\n    this.model = props.model\r\n    this.state = {\r\n      subscriptions: [\r\n        props.model.predictionUpdates.subscribe(predictionUpdate),\r\n        props.model.paramUpdates.subscribe(paramsUpdate)\r\n      ],\r\n      ...props.model.getLatestPrediction()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.subscriptions.forEach(sub => sub.unsubscribe())\r\n  }\r\n\r\n  render() {\r\n    const predictionDates = this.state.dateRange\r\n    const predictionCases = this.state.dailyCumulativeCases\r\n    const historicalDates = this.state.historicalData.dateRange\r\n    const historicalCases = this.state.historicalData.dailyCumulativeCases\r\n    const infectiousCases = this.state.dailyInfectiousCases\r\n    const hospitalizedCases = this.state.dailyHospitalizedCases\r\n\r\n    const predictFromDate = this.model.getPredictFromDate()\r\n    let dateText: string\r\n    if (predictFromDate) {\r\n      dateText = Dates.format(predictFromDate, 'yyyy-MM-dd')\r\n    } else {\r\n      dateText = ''\r\n    }\r\n    return (\r\n      <div>\r\n        <h2>Step 3. Configure other parameters of the model</h2>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            {round(this.state.detectionRatio * 100)}% of cases are reported\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={1}\r\n              min={0}\r\n              max={100}\r\n              value={round(this.state.detectionRatio * 100)}\r\n              onChange={(e, v) => this.model.setDetectionRatio(first(v) / 100)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            {round(this.state.hospitalizationRatio * 100)}% reported cases are hospitalized\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={1}\r\n              min={0}\r\n              max={100}\r\n              value={round(this.state.hospitalizationRatio * 100)}\r\n              onChange={(e, v) => this.model.setHospitalizationRatio(first(v) / 100)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Social-distancing has{' '}\r\n            {round(this.state.socialDistancingEffect * 100)}% effectiveness\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={1}\r\n              min={0}\r\n              max={100}\r\n              value={round(this.state.socialDistancingEffect * 100)}\r\n              onChange={(e, v) =>\r\n                this.model.setSocialDistancingEffect(first(v) / 100)\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Population ({this.model.historicalData.getChoiceText()})\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <TextField\r\n              value={this.state.population}\r\n              onChange={e => this.model.setPopulation(parseInt(e.target.value))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ height: 30 }}></div>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Start the prediction from {dateText}\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={1}\r\n              min={0}\r\n              max={this.state.historicalData.dateRange.length - 1}\r\n              value={this.state.predictFromDay || 0.0}\r\n              onChange={(e, v) => this.model.setPredictFromDay(first(v))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={5}>\r\n            Predict {this.state.predictForDays} days into the future\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <Slider\r\n              step={1}\r\n              min={0}\r\n              max={365 * 2}\r\n              value={this.state.predictForDays}\r\n              onChange={(e, v) => this.model.setPredictForDays(first(v))}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <h2>Step 4. Run the model</h2>\r\n        <Grid container style={{ marginTop: '20px', marginBottom: '20px' }}>\r\n          <Button onClick={e => this.model.updatePrediction()}>\r\n              Click me to run the model\r\n            </Button>\r\n        </Grid>\r\n        <Grid container>\r\n          Hospitalizations will peak at {round(this.state.peakHospitalizedCases)}.\r\n        </Grid>\r\n        <Grid container>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: historicalDates,\r\n                y: historicalCases,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'red' },\r\n                name: 'Reported cases (live data)'\r\n              },\r\n              {\r\n                x: predictionDates,\r\n                y: predictionCases,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'blue' },\r\n                name: 'Reported cases (predicted)'\r\n              },\r\n              {\r\n                x: predictionDates,\r\n                y: infectiousCases,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'green' },\r\n                name: 'Infectious people (predicted)'\r\n              },\r\n              {\r\n                x: predictionDates,\r\n                y: hospitalizedCases,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                marker: { color: 'black' },\r\n                name: 'Hospitalized people (predicted)'\r\n              }\r\n            ]}\r\n            layout={{\r\n              yaxis: { title: { text: 'Cases' } },\r\n              xaxis: { title: { text: 'Date' } },\r\n              height: 800,\r\n              width: 700,\r\n              legend: { orientation: 'h', yanchor: 'bottom', y: 1 }\r\n            }}\r\n          />\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { InfectivityModel } from './InfectivityModel'\r\nimport { Subject, Subscriber } from 'rxjs'\r\nimport * as Dates from 'date-fns'\r\nimport * as Utils from '../utils'\r\nimport { ceil, floor, max, range } from 'lodash'\r\nimport { DataSeries, HistoricalDataModel } from './HistoricalDataModel'\r\n\r\nexport interface OutbreakModelUpdate {\r\n  population?: number\r\n  detectionRatio?: number\r\n  predictFromDay?: number\r\n  predictForDays?: number\r\n  stepSizeDays?: number\r\n  socialDistancingEffect?: number\r\n  hospitalizationRatio?: number\r\n}\r\n\r\nexport interface OutbreakModelParams {\r\n  population: number\r\n  detectionRatio: number\r\n  predictFromDay: number | null\r\n  predictForDays: number\r\n  stepSizeDays: number\r\n  socialDistancingEffect: number\r\n  hospitalizationRatio: number\r\n}\r\n\r\nexport interface Prediction extends OutbreakModelParams {\r\n  dateRange: Date[]\r\n  dailyCumulativeCases: number[]\r\n  dailyRecoveredCases: number[]\r\n  dailyInfectiousCases: number[]\r\n  dailyHospitalizedCases: number[]\r\n  peakHospitalizedCases: number\r\n  predictFromDay: number\r\n  historicalData: DataSeries\r\n}\r\n\r\nexport class OutbreakModel {\r\n  private params: OutbreakModelParams\r\n  private latestPrediction: Prediction\r\n\r\n  readonly infectivity: InfectivityModel\r\n  readonly historicalData: HistoricalDataModel\r\n  readonly predictionUpdates: Subject<Prediction> = new Subject()\r\n  readonly paramUpdates: Subject<OutbreakModelUpdate> = new Subject()\r\n\r\n  constructor(\r\n    infectivity: InfectivityModel,\r\n    historicalData: HistoricalDataModel\r\n  ) {\r\n    this.infectivity = infectivity\r\n    this.historicalData = historicalData\r\n    this.params = {\r\n      population: 7530000000,\r\n      detectionRatio: 0.3,\r\n      predictFromDay: null,\r\n      stepSizeDays: 0.05,\r\n      predictForDays: 10,\r\n      socialDistancingEffect: 0.0,\r\n      hospitalizationRatio: 0.1\r\n    }\r\n    this.latestPrediction = this.predict()\r\n    historicalData.updates.subscribe(\r\n      Subscriber.create(update => this.updatePrediction())\r\n    )\r\n    infectivity.updates.subscribe(\r\n      Subscriber.create(update => this.updateParams({}))\r\n    )\r\n  }\r\n\r\n  getPredictFromDate(): Date | null {\r\n    const dateRange = this.latestPrediction.historicalData.dateRange\r\n    if (dateRange.length === 0) {\r\n      return null\r\n    } else if (this.params.predictFromDay == null) {\r\n      return dateRange[dateRange.length - 1]\r\n    } else {\r\n      return Dates.addDays(dateRange[0], this.params.predictFromDay)\r\n    }\r\n  }\r\n\r\n  setPredictFromDay(day: number) {\r\n    this.updateParams({ predictFromDay: day })\r\n  }\r\n\r\n  setPredictForDays(days: number) {\r\n    this.updateParams({ predictForDays: days })\r\n  }\r\n\r\n  getLatestPrediction(): Prediction {\r\n    return this.latestPrediction\r\n  }\r\n\r\n  setPopulation(population: number) {\r\n    this.updateParams({ population })\r\n  }\r\n\r\n  setDetectionRatio(detectionRatio: number) {\r\n    this.updateParams({ detectionRatio })\r\n  }\r\n\r\n  setSocialDistancingEffect(socialDistancingEffect: number) {\r\n    this.updateParams({ socialDistancingEffect })\r\n  }\r\n\r\n  setHospitalizationRatio(hospitalizationRatio: number) {\r\n    this.updateParams({hospitalizationRatio})\r\n  }\r\n\r\n  private updateParams(update: OutbreakModelUpdate) {\r\n    this.params = Object.assign(this.params, update)\r\n    this.paramUpdates.next(update)\r\n  }\r\n\r\n  updatePrediction() {\r\n    this.latestPrediction = this.predict()\r\n    this.predictionUpdates.next(this.latestPrediction)\r\n  }\r\n\r\n  private predict(): Prediction {\r\n    const {\r\n      population,\r\n      detectionRatio,\r\n      stepSizeDays,\r\n      predictForDays,\r\n      socialDistancingEffect,\r\n      hospitalizationRatio\r\n    } = this.params\r\n    const historicalData = this.historicalData.getData()\r\n    const predictFromDay =\r\n      this.params.predictFromDay == null\r\n        ? historicalData.dateRange.length\r\n        : this.params.predictFromDay + 1\r\n    const predictToDate = Dates.addDays(\r\n      historicalData.dateRange[0],\r\n      this.params.predictForDays + predictFromDay\r\n    )\r\n    const dateRange = Utils.dateRange(\r\n      historicalData.dateRange[0],\r\n      predictToDate\r\n    )\r\n    const stepsPerDay = ceil(1.0 / stepSizeDays)\r\n    const steps = stepsPerDay * dateRange.length\r\n    const stepsUntilRecovery =\r\n      this.infectivity.getParams().totalDays * stepsPerDay\r\n    const newlyInfected: number[] = [0.0]\r\n    const newlyRecovered: number[] = [0.0]\r\n    const totalInfected: number[] = [0.0]\r\n    const totalRecovered: number[] = [0.0]\r\n\r\n    range(1, steps).forEach(i => {\r\n      const day = floor(i / stepsPerDay)\r\n      if (Dates.isAfter(predictFromDay, day)) {\r\n        totalInfected.push(\r\n          historicalData.dailyCumulativeCases[day] / detectionRatio\r\n        )\r\n        newlyInfected.push(totalInfected[i] - totalInfected[i - 1])\r\n      } else {\r\n        let infectionRate = 0.0\r\n        range(0, i).forEach(j => {\r\n          infectionRate +=\r\n            newlyInfected[j] * this.infectivity.run((i - 1 - j) * stepSizeDays)\r\n        })\r\n        const susceptible = 1.0 - totalInfected[i - 1] / population\r\n        newlyInfected.push(\r\n          infectionRate *\r\n            stepSizeDays *\r\n            susceptible *\r\n            (1.0 - socialDistancingEffect)\r\n        )\r\n        totalInfected.push(totalInfected[i - 1] + newlyInfected[i])\r\n      }\r\n      if (i >= stepsUntilRecovery) {\r\n        newlyRecovered.push(newlyInfected[i - stepsUntilRecovery])\r\n      } else {\r\n        newlyRecovered.push(0.0)\r\n      }\r\n      totalRecovered.push(totalRecovered[i - 1] + newlyRecovered[i])\r\n    })\r\n\r\n    const dailyCumulativeCases: number[] = []\r\n    const dailyRecoveredCases: number[] = []\r\n    const dailyInfectiousCases: number[] = []\r\n    const dailyHospitalizedCases: number[] = []\r\n    let peakHospitalizedCases: number = 0\r\n    range(dateRange.length).forEach(i => {\r\n      const step = (i + 1) * stepsPerDay - 1\r\n      dailyCumulativeCases.push(totalInfected[step] * detectionRatio)\r\n      dailyRecoveredCases.push(totalRecovered[step] * detectionRatio)\r\n      dailyInfectiousCases.push(totalInfected[step] - totalRecovered[step])\r\n      dailyHospitalizedCases.push(dailyInfectiousCases[i] * detectionRatio * hospitalizationRatio)\r\n      peakHospitalizedCases = max([dailyHospitalizedCases[i], peakHospitalizedCases]) || peakHospitalizedCases\r\n    })\r\n\r\n    return {\r\n      dailyCumulativeCases,\r\n      dailyRecoveredCases,\r\n      dailyInfectiousCases,\r\n      dailyHospitalizedCases,\r\n      peakHospitalizedCases,\r\n      dateRange,\r\n      predictFromDay,\r\n      predictForDays,\r\n      population,\r\n      detectionRatio,\r\n      socialDistancingEffect,\r\n      stepSizeDays,\r\n      historicalData,\r\n      hospitalizationRatio\r\n    }\r\n  }\r\n}\r\n","import { HistoricalDataService } from '../services/HistoricalDataService'\r\nimport { Subject, Subscriber } from 'rxjs'\r\nimport { Data, update } from 'plotly.js'\r\n\r\nexport interface DataSeries {\r\n  dateRange: Date[]\r\n  dailyCumulativeCases: number[],\r\n  regions: string[],\r\n  provinces: string[]\r\n}\r\n\r\ninterface HistoricalDataModelParams {\r\n  region: string | null\r\n  province: string | null\r\n}\r\n\r\ninterface HistoricalDataModelUpdate {\r\n  region?: string | null\r\n  province?: string | null\r\n}\r\n\r\nexport class HistoricalDataModel {\r\n  private params: HistoricalDataModelParams\r\n  private dataService: HistoricalDataService\r\n  private dataSeries: DataSeries\r\n\r\n  constructor(dataService: HistoricalDataService) {\r\n    this.dataService = dataService\r\n    this.params = {\r\n      province: null,\r\n      region: null\r\n    }\r\n    const dateServiceUpdate = Subscriber.create(update => this.updateParams({}))\r\n    dataService.updates.subscribe(dateServiceUpdate)\r\n    this.dataSeries = this.calculate()\r\n  }\r\n\r\n  readonly updates: Subject<DataSeries> = new Subject()\r\n\r\n  getData(): DataSeries {\r\n    return this.dataSeries\r\n  }\r\n\r\n  private updateParams(update: HistoricalDataModelUpdate) {\r\n    this.params = Object.assign(this.params, update)\r\n    this.dataSeries = this.calculate()\r\n    this.updates.next(this.dataSeries)\r\n  }\r\n\r\n  setRegion(region: string | null) {\r\n    this.updateParams({region, province: null})\r\n  }\r\n\r\n  setProvince(province: string | null) {\r\n    this.updateParams({province})\r\n  }\r\n\r\n  getChoiceText(): string {\r\n    if (!this.params.region) {\r\n      return 'Worldwide'\r\n    } else if (!this.params.province) {\r\n      return this.params.region\r\n    } else {\r\n      return this.params.province\r\n    }\r\n  }\r\n\r\n  private calculate(): DataSeries {\r\n    const data = this.dataService.getHistoricalData()\r\n    let cases: number[]\r\n    let provinces: string[]\r\n\r\n    if (!this.params.region) {\r\n      cases = data.dailyCumulativeCases\r\n      provinces = []\r\n    } else {\r\n      const region = data.regions.get(this.params.region)\r\n      provinces = Array.from(region?.provinces.keys() || [])\r\n      if (!this.params.province) {\r\n        cases = region?.dailyCumulativeCases || []\r\n      } else {\r\n        cases = region?.provinces?.get(this.params.province)?.dailyCumulativeCases || []\r\n      }\r\n    }\r\n\r\n    return {\r\n      dateRange: data.dateRange,\r\n      dailyCumulativeCases: cases,\r\n      regions: Array.from(this.dataService.getHistoricalData().regions.keys()),\r\n      provinces\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport InfectivityPlot from './InfectivityPlot'\r\nimport HistoricalDataPlot from './HistoricalDataPlot'\r\nimport { Container, Grid } from '@material-ui/core'\r\nimport { InfectivityModel } from '../model/InfectivityModel'\r\nimport { HistoricalDataService } from '../services/HistoricalDataService'\r\nimport OutbreakPredictionPlot from './OutbreakPredictionPlot'\r\nimport { OutbreakModel } from '../model/PredictionModel'\r\nimport { HistoricalDataModel } from '../model/HistoricalDataModel'\r\n\r\nexport default class App extends React.Component {\r\n  state: {\r\n    infectivityModel: InfectivityModel\r\n    historicalDataModel: HistoricalDataModel\r\n    outbreakModel: OutbreakModel\r\n  }\r\n\r\n  constructor(props: {}) {\r\n    super(props)\r\n    const infectivityModel = new InfectivityModel()\r\n    const historicalData = new HistoricalDataService()\r\n    const historicalDataModel = new HistoricalDataModel(historicalData)\r\n    const outbreakModel = new OutbreakModel(infectivityModel, historicalDataModel)\r\n    this.state = {\r\n      infectivityModel,\r\n      historicalDataModel,\r\n      outbreakModel\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <h1>COVID-19 Predictive Model</h1>\r\n        <Grid container>\r\n          <HistoricalDataPlot dataModel={this.state.historicalDataModel} />\r\n        </Grid>\r\n        <Grid container>\r\n          <InfectivityPlot\r\n            start={0.0}\r\n            stop={50.0}\r\n            model={this.state.infectivityModel}\r\n          />\r\n        </Grid>\r\n        <Grid container>\r\n          <OutbreakPredictionPlot model={this.state.outbreakModel} />\r\n        </Grid>\r\n      </Container>\r\n    )\r\n  }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}